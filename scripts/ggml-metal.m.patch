--- ggml-metal-orig.m	2023-08-16 09:13:47
+++ ggml-metal.m	2023-08-16 09:22:15
@@ -163,10 +163,15 @@
 
     // load kernels
     {
+        NSError * error = nil;
 #define LM_GGML_METAL_ADD_KERNEL(name) \
         ctx->function_##name = [ctx->library newFunctionWithName:@"kernel_"#name]; \
-        ctx->pipeline_##name = [ctx->device newComputePipelineStateWithFunction:ctx->function_##name error:nil]; \
-        fprintf(stderr, "%s: loaded %-32s %16p\n", __func__, "kernel_"#name, (void *) ctx->pipeline_##name);
+        ctx->pipeline_##name = [ctx->device newComputePipelineStateWithFunction:ctx->function_##name error:&error]; \
+        fprintf(stderr, "%s: loaded %-32s %16p\n", __func__, "kernel_"#name, (void *) ctx->pipeline_##name); \
+        if (error) { \
+            fprintf(stderr, "%s: load pipeline error: %s\n", __func__, [[error description] UTF8String]); \
+            return NULL; \
+        }
 
         LM_GGML_METAL_ADD_KERNEL(add);
         LM_GGML_METAL_ADD_KERNEL(add_row);
@@ -205,13 +210,13 @@
 #undef LM_GGML_METAL_ADD_KERNEL
     }
 
-    fprintf(stderr, "%s: recommendedMaxWorkingSetSize = %8.2f MB\n", __func__, ctx->device.recommendedMaxWorkingSetSize / 1024.0 / 1024.0);
+    // fprintf(stderr, "%s: recommendedMaxWorkingSetSize = %8.2f MB\n", __func__, ctx->device.recommendedMaxWorkingSetSize / 1024.0 / 1024.0);
     fprintf(stderr, "%s: hasUnifiedMemory             = %s\n",       __func__, ctx->device.hasUnifiedMemory ? "true" : "false");
-    if (ctx->device.maxTransferRate != 0) {
-        fprintf(stderr, "%s: maxTransferRate              = %8.2f MB/s\n", __func__, ctx->device.maxTransferRate / 1024.0 / 1024.0);
-    } else {
-        fprintf(stderr, "%s: maxTransferRate              = built-in GPU\n", __func__);
-    }
+    // if (ctx->device.maxTransferRate != 0) {
+    //     fprintf(stderr, "%s: maxTransferRate              = %8.2f MB/s\n", __func__, ctx->device.maxTransferRate / 1024.0 / 1024.0);
+    // } else {
+    //     fprintf(stderr, "%s: maxTransferRate              = built-in GPU\n", __func__);
+    // }
 
     return ctx;
 }
@@ -337,15 +342,15 @@
             }
         }
 
-        fprintf(stderr, ", (%8.2f / %8.2f)",
-                ctx->device.currentAllocatedSize / 1024.0 / 1024.0,
-                ctx->device.recommendedMaxWorkingSetSize / 1024.0 / 1024.0);
+        // fprintf(stderr, ", (%8.2f / %8.2f)",
+        //         ctx->device.currentAllocatedSize / 1024.0 / 1024.0,
+        //         ctx->device.recommendedMaxWorkingSetSize / 1024.0 / 1024.0);
 
-        if (ctx->device.currentAllocatedSize > ctx->device.recommendedMaxWorkingSetSize) {
-            fprintf(stderr, ", warning: current allocated size is greater than the recommended max working set size\n");
-        } else {
-            fprintf(stderr, "\n");
-        }
+        // if (ctx->device.currentAllocatedSize > ctx->device.recommendedMaxWorkingSetSize) {
+        //     fprintf(stderr, ", warning: current allocated size is greater than the recommended max working set size\n");
+        // } else {
+        //     fprintf(stderr, "\n");
+        // }
     }
 
     return true;
